#!/usr/bin/env python
# aagen - the driver for our dungeon generator program

# Fixup sys.path to point to the module
import sys, os
path = os.path.abspath(sys.argv[0])
while os.path.dirname(path) != path:
    if os.path.exists(os.path.join(path, 'aagen', '__init__.py')):
        sys.path.insert(0, path)
        break
    path = os.path.dirname(path)

import pygame
import logging
import traceback
import argparse
import json

from aagen.generator import DungeonGenerator
from aagen.map import DungeonMap
from aagen.display import DungeonDisplay
from aagen.aajson import MapEncoder, map_from_dict

log = logging.getLogger('aagen')

parser = argparse.ArgumentParser(description="AA Dungeon Generator")

parser.add_argument('-V', '--version', action='version',
                    version="%(prog)s 1.0")

parser.add_argument('-s', '--seed', type=int,
                    help="""Set random seed for dungeon generation""")

parser.add_argument('-f', '--file', default=None,
                    help="""Read map data from the given file instead of
                    starting a new dungeon""")

parser.add_argument('-v', '--verbose', action='count', default=0,
                    help="""Increase across-the-board verbosity of the program.
                    Repeatable for even more verbosity.""")

def main():

    logging.basicConfig()

    args = parser.parse_args()

    log_level = {0: logging.WARNING,
                 1: logging.INFO,
                 2: logging.DEBUG}

    log.setLevel(log_level.get(args.verbose, logging.DEBUG))

    log.info("Running!")

    pygame.init()
    clock = pygame.time.Clock()

    if args.file is not None:
        with open(args.file, 'r') as f:
            dungeon_map = json.load(f, object_hook=map_from_dict)
    else:
        dungeon_map = DungeonMap()
    dungeon_display = DungeonDisplay(dungeon_map)
    dungeon_generator = DungeonGenerator(dungeon_map, args.seed)

    dungeon_display.draw()

    running = True
    done = False

    while not done:
        clock.tick(10)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    done = True
                elif event.key == pygame.K_SPACE:
                    if running:
                        try:
                            dungeon_generator.step()
                        except Exception as e:
                            print (e)
                            traceback.print_exc()
                            running = False
                        dungeon_display.draw()
                elif event.key == pygame.K_w:
                    with open("current.aamap", 'w') as f:
                        json.dump(dungeon_map, f,
                                  cls=MapEncoder, indent=2, sort_keys=True)
                elif event.key == pygame.K_l:
                    with open("current.aamap", 'r') as f:
                        dungeon_map = json.load(f, object_hook=map_from_dict)
                    dungeon_display = DungeonDisplay(dungeon_map)
                    dungeon_generator = DungeonGenerator(dungeon_map, args.seed)
                    dungeon_display.draw()
                    running = True
            elif event.type == pygame.VIDEORESIZE:
                dungeon_display.resize_display((event.w, event.h))
                dungeon_display.draw()
            elif event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    (click_x, click_y) = dungeon_display.screen_to_map(event.pos)
                    object = dungeon_map.object_at((click_x, click_y))
                    print(object)

    log.info("Done!")

    pygame.quit()


if __name__ == "__main__":
    main()
