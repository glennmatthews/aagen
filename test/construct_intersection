#!/usr/bin/env python
# construct_intersection - unit test for geometry.construct_intersection()

# Fixup sys.path to point to the module
import sys, os
path = os.path.abspath(sys.argv[0])
while os.path.dirname(path) != path:
    if os.path.exists(os.path.join(path, 'aagen', '__init__.py')):
        sys.path.insert(0, path)
        break
    path = os.path.dirname(path)

import pygame
import logging
import traceback
import argparse

from aagen.map import DungeonMap, Region, Connection
from aagen.display import DungeonDisplay
from aagen.direction import Direction
from aagen.geometry import construct_intersection

import aagen.geometry

log = logging.getLogger('aagen')

parser = argparse.ArgumentParser(description="AA Dungeon Generator")

parser.add_argument('-v', '--verbose', action='count', default=0,
                    help="""Increase across-the-board verbosity of the program.
                    Repeatable for even more verbosity.""")

parser.add_argument('-b', '--bias', choices=['left', 'right'], default='left',
                    help="""Select angle of rotation for construction""")

parser.add_argument('-x', '--extra', action='store_true',
                    help="""Generate extra (non-standard) intersections""")


def generate_intersections(dungeon_map, width, exit_width, s=1, extra=False):
    dungeon_map.__init__()
    x0 = 0
    y0 = 0
    for base_dir in [Direction.N, Direction.NE]:
        if base_dir.is_cardinal():
            sweep_list = [base_dir.rotate(90)]
        else:
            sweep_list = [base_dir.rotate(90), base_dir.rotate(-90)]
        # Intersection shapes generated by the current dungeon generator:
        base_exits = [
            [base_dir.rotate(135 * s)], # Turn 135
            [base_dir.rotate(90 * s)], # Turn 90
            [base_dir.rotate(45 * s)], # Turn 45
            [base_dir.rotate(135 * s), base_dir], # Side passage 135
            [base_dir.rotate(90 * s), base_dir], # Side passage 90
            [base_dir.rotate(45 * s), base_dir], # Side passage 45
            None, # line wrap
            [base_dir.rotate(45 * s), base_dir.rotate(-45 * s)], # Y
            [base_dir.rotate(90 * s), base_dir.rotate(-90 * s)], # T
            [base_dir.rotate(90 * s), base_dir.rotate(-90 * s),
             base_dir], # Four-way intersection
            [base_dir.rotate(135 * s), base_dir.rotate(45 * s),
             base_dir.rotate(-135 * s), base_dir.rotate(-45 * s)], # X
            # Alternate X-junction
            [base_dir.rotate(135 * s), base_dir.rotate(-45 * s), base_dir],
            None
        ]
        extra_exits = [
            # Distorted T-junctions
            [base_dir.rotate(135 * s), base_dir.rotate(-45 * s)],
            [base_dir.rotate(90 * s), base_dir.rotate(-45 * s)],
            [base_dir.rotate(135 * s), base_dir.rotate(-135 * s)],
            [base_dir.rotate(90 * s), base_dir.rotate(-135 * s)],
            # X-junction askew from base passage
            [base_dir.rotate(135 * s), base_dir.rotate(45 * s),
             base_dir.rotate(-135 * s), base_dir.rotate(-45 * s),
             base_dir],
            # W-junction?
            [base_dir.rotate(45 * s), base_dir.rotate(-45 * s), base_dir],
            None
        ]
        exit_list = base_exits if not extra else extra_exits
        for sweep_dir in sweep_list:
            for exits in exit_list:
                if exits is None:
                    x0 = 0
                    y0 -= 50 + width + exit_width
                    continue
                else:
                    x0 += 50 + width + exit_width

                if sweep_dir == base_dir.rotate(90) or width % 20 != 0:
                    base_point = aagen.geometry.point(x0, y0)
                else:
                    base_point = aagen.geometry.point(x0 + 5, y0 + 5)
                log.info("Intersection from {0} (w {1}) to {2} (w {3})"
                         .format(base_dir, width, exits, exit_width))
                base_line = aagen.geometry.point_sweep(base_point, sweep_dir,
                                                       width)
                base_conn = Connection(Connection.ONEWAY, base_line, None,
                                       base_dir)
                (entry, base_line) = aagen.geometry.sweep(base_line,
                                                          base_dir, 20)
                temp_region = Region(Region.PASSAGE, entry)
                base_conn.add_region(temp_region)
                try:
                    (polygon, exit_dict) = construct_intersection(base_line,
                                                                  base_dir,
                                                                  exits,
                                                                  exit_width)
                except Exception as e:
                    print (e)
                    traceback.print_exc()
                    continue

                region = Region(Region.CHAMBER, polygon)
                conn = Connection(Connection.ONEWAY, base_line,
                                  [region, temp_region], base_dir)
                for (exit_dir, exit_line) in exit_dict.items():
                    if aagen.geometry.grid_aligned(exit_line, exit_dir):
                        conn_type = Connection.ARCH
                    else:
                        conn_type = Connection.SECRET
                    conn = Connection(conn_type, exit_line, region,
                                      exit_dir)
                    (extension, endwall) = aagen.geometry.sweep(exit_line,
                                                                exit_dir, 20)
                    temp_region = Region(Region.PASSAGE, extension)
                    conn.add_region(temp_region)
                    temp_conn = Connection(Connection.OPEN, endwall,
                                           temp_region, exit_dir)
                dungeon_map.add_region(region)


def main():
    logging.basicConfig()

    args = parser.parse_args()

    log_level = {0: logging.ERROR,
                 1: logging.WARNING,
                 2: logging.INFO,
                 3: logging.DEBUG}

    log.setLevel(log_level.get(args.verbose, logging.DEBUG))

    log.info("Running!")

    if args.bias == 'left':
        s = 1
    else:
        s = -1

    pygame.init()
    clock = pygame.time.Clock()

    dungeon_map = DungeonMap()
    dungeon_display = DungeonDisplay(dungeon_map)

    # Construct demo intersections
    base_width = 10
    exit_width = 10
    generate_intersections(dungeon_map, base_width, exit_width, s, args.extra)
    dungeon_map.flush()

    dungeon_display.draw(verbosity=args.verbose)

    done = False
    dirty = False

    print("Press ']' or '[' to increment/decrement the entrance width.")
    print("Press '=' or '-' to increment/decrement the exit width.")
    print("Press 'l' or 'r' to toggle the rotation angle.")
    print("Press 'x' to switch between intersection sets")

    while not done:
        clock.tick(10)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    done = True
                elif event.key == pygame.K_RIGHTBRACKET and base_width < 50:
                    base_width += 10
                    dirty = True
                elif event.key == pygame.K_LEFTBRACKET and base_width > 10:
                    base_width -= 10
                    dirty = True
                elif event.key == pygame.K_EQUALS and exit_width < 50:
                    exit_width += 10
                    dirty = True
                elif event.key == pygame.K_MINUS and exit_width > 10:
                    exit_width -= 10
                    dirty = True
                elif event.key == pygame.K_l and s != 1:
                    s = 1
                    dirty = True
                elif event.key == pygame.K_r and s != -1:
                    s = -1
                    dirty = True
                elif event.key == pygame.K_x:
                    args.extra = not args.extra
                    dirty = True
            elif event.type == pygame.VIDEORESIZE:
                dungeon_display.resize_display((event.w, event.h))
                dungeon_display.draw(verbosity=args.verbose)
            elif event.type == pygame.MOUSEBUTTONUP:
                (click_x, click_y) = dungeon_display.screen_to_map(event.pos)
                object = dungeon_map.object_at((click_x, click_y))
                print(object)

        if dirty:
            generate_intersections(dungeon_map, base_width, exit_width, s,
                                   args.extra)
            dungeon_map.flush()
            dungeon_display.draw(verbosity=args.verbose)
            dirty = False

    log.info("Done!")

    pygame.quit()


if __name__ == "__main__":
    main()
