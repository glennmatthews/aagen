#!/usr/bin/env python
# room_shapes - unit tests for geometry.*_list() functions

# Fixup sys.path to point to the module
import sys, os
path = os.path.abspath(sys.argv[0])
while os.path.dirname(path) != path:
    if os.path.exists(os.path.join(path, 'aagen', '__init__.py')):
        sys.path.insert(0, path)
        break
    path = os.path.dirname(path)

import pygame
import logging
import traceback
import argparse
import math

from aagen.map import DungeonMap, Region, Connection
from aagen.display import DungeonDisplay
from aagen.direction import Direction
from aagen.geometry import trapezoid_list

import aagen.geometry

log = logging.getLogger('aagen')

supported_shapes = ['circle', 'hexagon', 'octagon', 'oval', 'trapezoid',
                    'triangle']

size_list = [500, 900, 1300, 2000, 2700, 3400,
                             4000,       5400,
                                         7400,
                                         9400]

add_exits = False
exit_dir = Direction.N

parser = argparse.ArgumentParser(
    description="AA Dungeon Generator shape construction test")

parser.add_argument('-v', '--verbose', action='count', default=0,
                    help="""Increase across-the-board verbosity of the program.
                    Repeatable for even more verbosity.""")

parser.add_argument('-s', '--shape', default=supported_shapes[0],
                    choices=supported_shapes,
                    help="""Type of shape to draw first""")

def shape_lists_to_map(dungeon_map, shape_lists, exit_width):
    dungeon_map.__init__()
    x0 = 0
    y0 = 0

    for shape_list in shape_lists:
        for shape in shape_list:
            region = Region(Region.CHAMBER,
                            aagen.geometry.translate(shape,
                                                     x0,
                                                     y0))
            dungeon_map.add_region(region)
            if add_exits:
                candidates = dungeon_map.find_options_for_connection(
                    exit_width, region, exit_dir, allow_rotation=False)
                for candidate in candidates:
                    # For now, do not distort the shape of the base geometry as
                    # would be done in a real map - let the connection "float".
                    #region.polygon = aagen.geometry.union(region.polygon,
                    #                                      candidate.polygon)
                    #dungeon_map.refresh_conglomerate()
                    conn = Connection(Connection.ONEWAY, candidate.line, region,
                                      exit_dir)
                    region.add_connection(conn)
                    dungeon_map.add_connection(conn)

            y0 += 10 * math.ceil((shape.bounds[3] - shape.bounds[1] + 5) / 10)
            y0 += 10
        y0 = 0
        x0 += 10
        x0 += 10 * math.ceil((max([shape.bounds[2] - shape.bounds[0]
                                  for shape in shape_list]) + 5) / 10)


def make_shape_lists(shape):
    # Construct demo intersections
    if shape == 'circle':
        return [aagen.geometry.circle_list(size) for size in size_list]
    elif shape == 'hexagon':
        return [aagen.geometry.hexagon_list(size, rotate=False)
                for size in size_list]
    elif shape == 'octagon':
        return [aagen.geometry.octagon_list(size) for size in size_list]
    elif shape == 'oval':
        return [aagen.geometry.oval_list(size, rotate=False)
                for size in size_list]
    elif shape == 'trapezoid':
        return [aagen.geometry.trapezoid_list(size,
                                              rotate_and_mirror=False)
                for size in size_list]
    elif shape == 'triangle':
        return [aagen.geometry.triangle_list(size, rotate=False)
                for size in size_list]
    else:
        raise LookupError("Unknown shape {0}".format(shape))


def main():
    global exit_dir, add_exits
    logging.basicConfig()

    args = parser.parse_args()

    log_level = {0: logging.ERROR,
                 1: logging.WARNING,
                 2: logging.INFO,
                 3: logging.DEBUG}

    log.setLevel(log_level.get(args.verbose, logging.DEBUG))

    log.info("Running!")

    pygame.init()
    clock = pygame.time.Clock()

    dungeon_map = DungeonMap()
    dungeon_display = DungeonDisplay(dungeon_map)

    shape_lists = make_shape_lists(args.shape)

    num_shapes = 5
    exit_width = 10

    shape_lists_to_map(dungeon_map, shape_lists[:num_shapes], exit_width)
    dungeon_map.flush()

    dungeon_display.draw(verbosity=args.verbose)

    done = False
    dirty = False

    print("Press N/P to switch to next/previous room shape class")
    print("Press -/= to decrease/increase the range of room sizes shown")
    print("Press E to toggle exit construction")
    print("When exit construction is on, press L/R to change exit direction")

    while not done:
        clock.tick(10)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    done = True
                elif event.key == pygame.K_EQUALS:
                    if num_shapes < len(shape_lists):
                        num_shapes += 1
                        dirty = True
                elif event.key == pygame.K_MINUS:
                    if num_shapes > 1:
                        num_shapes -= 1
                        dirty = True
                elif event.key == pygame.K_e:
                    add_exits = not add_exits
                    dirty = True
                elif event.key == pygame.K_l:
                    if add_exits:
                        exit_dir = exit_dir.rotate(45)
                        dirty = True
                elif event.key == pygame.K_n:
                    next_index = supported_shapes.index(args.shape) + 1
                    if next_index >= len(supported_shapes):
                        next_index = 0
                    args.shape = supported_shapes[next_index]
                    shape_lists = make_shape_lists(args.shape)
                    dirty = True
                elif event.key == pygame.K_p:
                    prev_index = supported_shapes.index(args.shape) - 1
                    if prev_index < 0:
                        prev_index = len(supported_shapes) - 1
                    args.shape = supported_shapes[prev_index]
                    shape_lists = make_shape_lists(args.shape)
                    dirty = True
                elif event.key == pygame.K_r:
                    if add_exits:
                        exit_dir = exit_dir.rotate(-45)
                        dirty = True
                elif event.key == pygame.K_w:
                    if add_exits:
                        exit_width += 10
                        dirty = True
            elif event.type == pygame.VIDEORESIZE:
                dungeon_display.resize_display((event.w, event.h))
                dungeon_display.draw(verbosity=args.verbose)
            elif event.type == pygame.MOUSEBUTTONUP:
                (click_x, click_y) = dungeon_display.screen_to_map(event.pos)
                object = dungeon_map.object_at((click_x, click_y))
                print(object)
                if hasattr(object, "polygon"):
                    print(aagen.geometry.to_string(object.polygon))

        if dirty:
            shape_lists_to_map(dungeon_map, shape_lists[:num_shapes],
                               exit_width)
            dungeon_map.flush()

            dungeon_display.draw(verbosity=args.verbose)
            dirty = False

    log.info("Done!")

    pygame.quit()


if __name__ == "__main__":
    main()
