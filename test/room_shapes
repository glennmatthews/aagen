#!/usr/bin/env python
# room_shapes - unit tests for geometry.*_list() functions

# Fixup sys.path to point to the module
import sys, os
path = os.path.abspath(sys.argv[0])
while os.path.dirname(path) != path:
    if os.path.exists(os.path.join(path, 'aagen', '__init__.py')):
        sys.path.insert(0, path)
        break
    path = os.path.dirname(path)

import pygame
import logging
import traceback
import argparse

from aagen.map import DungeonMap, Region, Connection
from aagen.display import DungeonDisplay
from aagen.direction import Direction
from aagen.geometry import trapezoid_list

import aagen.geometry

log = logging.getLogger('aagen')

parser = argparse.ArgumentParser(
    description="AA Dungeon Generator shape construction test")

parser.add_argument('-v', '--verbose', action='count', default=0,
                    help="""Increase across-the-board verbosity of the program.
                    Repeatable for even more verbosity.""")

def shape_lists_to_map(dungeon_map, shape_lists):
    dungeon_map.__init__()
    x0 = 0
    y0 = 0

    for shape_list in shape_lists:
        for shape in shape_list:
            region = Region(Region.CHAMBER,
                            aagen.geometry.translate(shape, x0, y0))
            dungeon_map.add_region(region)
            x0 += shape.bounds[2] - shape.bounds[0] + 10
        x0 = 0
        y0 += 10 + max([shape.bounds[3] - shape.bounds[1]
                        for shape in shape_list])


def main():
    logging.basicConfig()

    args = parser.parse_args()

    log_level = {0: logging.ERROR,
                 1: logging.WARNING,
                 2: logging.INFO,
                 3: logging.DEBUG}

    log.setLevel(log_level.get(args.verbose, logging.DEBUG))

    log.info("Running!")

    pygame.init()
    clock = pygame.time.Clock()

    dungeon_map = DungeonMap()
    dungeon_display = DungeonDisplay(dungeon_map)

    # Construct demo intersections
    shape_lists = [aagen.geometry.trapezoid_list(size, rotate_and_mirror=False)
                   for size in [500, 900, 1300, 2000, 2700, 3400,
                                                4000,       5400,
                                                            7400,
                                                            9400]]
    shape_lists_to_map(dungeon_map, shape_lists)
    dungeon_map.flush()

    dungeon_display.draw(verbosity=args.verbose)

    done = False
    dirty = False

    while not done:
        clock.tick(10)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    done = True
            elif event.type == pygame.VIDEORESIZE:
                dungeon_display.resize_display((event.w, event.h))
                dungeon_display.draw(verbosity=args.verbose)
            elif event.type == pygame.MOUSEBUTTONUP:
                (click_x, click_y) = dungeon_display.screen_to_map(event.pos)
                object = dungeon_map.object_at((click_x, click_y))
                print(object)

    log.info("Done!")

    pygame.quit()


if __name__ == "__main__":
    main()
